{"name": "test_select_energy_recovery_level[recovery_data2]", "status": "failed", "statusDetails": {"message": "AssertionError: True\nassert 'true' == 'false'\n  - false\n  + true", "trace": "self = <test_drive.TestDrive object at 0x105c669d0>\ninit_drive = <pages.car_settings.drive_page.DrivePage object at 0x105f29580>\nrecovery_data = ('标准', 'true')\n\n    @pytest.mark.parametrize('recovery_data', energy_level_data)\n    @pytest.mark.flaky(reruns=3)\n    @allure.story('选择能量回收等级')\n    @pytest.mark.test_energy_recovery\n    def test_select_energy_recovery_level(self, init_drive, recovery_data):\n        \"\"\"\n        选择能量回收等级\n        :param init_drive:\n        :param recovery_data:\n        :return:\n        \"\"\"\n        drive_page = init_drive\n        # drive_page.swipe_to_energy()\n    \n        level_name = recovery_data[0]\n        excepted_result = recovery_data[1]\n        logger.info('选择的能量回收的等级为: {}'.format(level_name))\n    \n        drive_page.select_energy(level_name)\n        sleep(3)\n    \n        checked = drive_page.energy_recovery_level_select(level_name).get_attribute('checked')\n    \n        try:\n            assert excepted_result == checked, True\n            logger.info('energy recovery level checked is: {}'.format(checked))\n        except AssertionError as e:\n            logger.error(e)\n>           raise e\n\ntests/car_settings/test_drive.py:51: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <test_drive.TestDrive object at 0x105c669d0>\ninit_drive = <pages.car_settings.drive_page.DrivePage object at 0x105f29580>\nrecovery_data = ('标准', 'true')\n\n    @pytest.mark.parametrize('recovery_data', energy_level_data)\n    @pytest.mark.flaky(reruns=3)\n    @allure.story('选择能量回收等级')\n    @pytest.mark.test_energy_recovery\n    def test_select_energy_recovery_level(self, init_drive, recovery_data):\n        \"\"\"\n        选择能量回收等级\n        :param init_drive:\n        :param recovery_data:\n        :return:\n        \"\"\"\n        drive_page = init_drive\n        # drive_page.swipe_to_energy()\n    \n        level_name = recovery_data[0]\n        excepted_result = recovery_data[1]\n        logger.info('选择的能量回收的等级为: {}'.format(level_name))\n    \n        drive_page.select_energy(level_name)\n        sleep(3)\n    \n        checked = drive_page.energy_recovery_level_select(level_name).get_attribute('checked')\n    \n        try:\n>           assert excepted_result == checked, True\nE           AssertionError: True\nE           assert 'true' == 'false'\nE             - false\nE             + true\n\ntests/car_settings/test_drive.py:47: AssertionError"}, "description": "\n        选择能量回收等级\n        :param init_drive:\n        :param recovery_data:\n        :return:\n        ", "attachments": [{"name": "log", "source": "5c3597c6-9dde-46b9-972d-e4e0f5f0c43b-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "recovery_data", "value": "('标准', 'true')"}], "start": 1688608460282, "stop": 1688608465245, "uuid": "5c919ca5-2569-4430-bce8-4496ae4d48ae", "historyId": "fbe6818c4a8ade5f4f8dc2e8aeb4ba00", "testCaseId": "10d98db0ad642d2846181c761f4be8be", "fullName": "tests.car_settings.test_drive.TestDrive#test_select_energy_recovery_level", "labels": [{"name": "story", "value": "选择能量回收等级"}, {"name": "feature", "value": "测试驾驶功能"}, {"name": "tag", "value": "test_energy_recovery"}, {"name": "tag", "value": "flaky(reruns=3)"}, {"name": "parentSuite", "value": "tests.car_settings"}, {"name": "suite", "value": "test_drive"}, {"name": "subSuite", "value": "TestDrive"}, {"name": "host", "value": "yuxiangdeMacBook-Pro.local"}, {"name": "thread", "value": "22618-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.car_settings.test_drive"}]}